/*
 serial_simple.c
 Created on: Sep 25, 2013
    Author: Luis Alberto Rivera
*/

#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <vector>
#include <sys/types.h>
#include <fcntl.h>
#include <semaphore.h>
#include <wiringPi.h>
#include "serial_ece4220.h"
#include "ece4220lab3.h"

using namespace std;

#define INIT_VALUE (0)
#define RED (2)
#define YELLOW (3)
#define GREEN (4)
#define BLUE (5)
#define BUTTON (16)

sem_t gps_semaphore;


struct gpsData{
	struct timespec time;
	unsigned char value;

};

gpsData data,event;

int setupTheThings(void);
void* collection(void*);
void* eventWatcher(void*);

int main(void)
{
	int dummy;

	dummy = system("rm EventWatcher");
	dummy = system("mkfifo EventWatcher");


	struct timespec gps_time;
	sem_init(&gps_semaphore, 0, INIT_VALUE);
	pthread_t collectionThread, eventWatcherThread, interpolationThread;

	//Setup the IO
	setupTheThings();

	// Open the serial port. The first argument denotes the serial port number,
	// while the second and third denote the baud rate (of 115200 in this case)
	int prt_id = serial_open(0,5,5);
	int num_bytes;
	unsigned char x;

	usleep(10);
	//pthread_create(&collectionThread, NULL, collection, NULL);
	pthread_create(&eventWatcherThread, NULL, eventWatcher, NULL);
	while(1)
	{

		//Read data from the serial port. Blocking function
		num_bytes = read(prt_id, &x, 1);
		clock_gettime(CLOCK_REALTIME, &gps_time);
		data.value = x;
		data.time = gps_time;
		//cout<<"\n"<<(int)(data.value)<<endl;pthread_create(&collectionThread, NULL, collection, NULL);
		//sem_post(&gps_semaphore);
	}



	return(0);
}

int setupTheThings(void){
	//Copy pasta
	wiringPiSetupGpio();
	pinMode(RED, OUTPUT);
	pinMode(YELLOW, OUTPUT);
	pinMode(GREEN, OUTPUT);
	pinMode(BLUE, OUTPUT);
	pinMode(BUTTON, INPUT);

	pullUpDnControl(RED, PUD_DOWN);
	pullUpDnControl(YELLOW, PUD_DOWN);
	pullUpDnControl(GREEN, PUD_DOWN);
	pullUpDnControl(BLUE, PUD_DOWN);
	pullUpDnControl(BUTTON, PUD_DOWN);
}

void* collection(void*){

	gpsData interpolateThis[3];
	gpsData gpsArray[2];

	int pipe_fromEvent;
	if((pipe_fromEvent = open("EventWatcher", O_RDONLY)) < 0){
		cout<<"\nEventWatcher pipe reading error"<<endl;
		exit(-1);
	}

}
